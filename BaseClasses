#region base classes
public class FieldMetadata
{
    public string Name { get; set; }
    public bool IsComplex { get; set; }
    public Type QueryBuilderType { get; set; }
}

public enum Formatting
{
    None,
    Indented
}

public abstract class GraphQlQueryBuilder
{
    private const int IndentationSize = 2;

    private static readonly IList<FieldMetadata> EmptyFieldCollection = new List<FieldMetadata>();

    private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

    protected virtual IList<FieldMetadata> AllFields { get; } = EmptyFieldCollection;

    public void Clear()
    {
        _fieldCriteria.Clear();
    }

    public void IncludeAllFields()
    {
        IncludeFields(AllFields);
    }

    public string Build(Formatting formatting = Formatting.Indented)
    {
        return Build(formatting, 1);
    }

    protected string Build(Formatting formatting, int level)
    {
        var builder = new StringBuilder();
        builder.Append("{");
        
        if (formatting == Formatting.Indented)
            builder.AppendLine();

        var index = 0;
        foreach (var criteria in _fieldCriteria.Values)
        {
            builder.Append(criteria.Build(formatting, level));
            if (formatting == Formatting.Indented)
                builder.AppendLine();
            else if (++index < _fieldCriteria.Count)
                builder.Append(",");
        }

        if (formatting == Formatting.Indented)
            builder.Append(GetIndentation(level - 1));
        
        builder.Append("}");
        return builder.ToString();
    }

    protected void IncludeScalarField(string fieldName, IDictionary<string, object> args)
    {
        _fieldCriteria[fieldName] = new GraphQlScalarFieldCriteria(fieldName, args);
    }

    protected void IncludeObjectField(string fieldName, GraphQlQueryBuilder objectFieldQueryBuilder, IDictionary<string, object> args)
    {
        _fieldCriteria[fieldName] = new GraphQlObjectFieldCriteria(fieldName, objectFieldQueryBuilder, args);
    }

    protected void IncludeFields(IEnumerable<FieldMetadata> fields)
    {
        foreach (var field in fields)
        {
            if (field.QueryBuilderType == null)
                IncludeScalarField(field.Name, null);
            else
            {
                var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(field.QueryBuilderType);
                queryBuilder.IncludeAllFields();
                IncludeObjectField(field.Name, queryBuilder, null);
            }
        }
    }

    private static string GetIndentation(int level)
    {
        return new String(' ', level * IndentationSize);
    }

    private abstract class GraphQlFieldCriteria
    {
        public readonly string FieldName;
        public readonly IDictionary<string, object> Args;

        protected GraphQlFieldCriteria(string fieldName, IDictionary<string, object> args)
        {
            FieldName = fieldName;
            Args = args;
        }

        public abstract string Build(Formatting formatting, int level);

        protected string BuildArgumentClause(Formatting formatting)
        {
            var separator = formatting == Formatting.Indented ? " " : null;
            return
                Args?.Count > 0
                    ? $"({String.Join($",{separator}", Args.Select(kvp => $"{kvp.Key}:{separator}{BuildArgumentValue(kvp.Value)}"))}){separator}"
                    : String.Empty;
        }

        private string BuildArgumentValue(object value)
        {
            if (value is Enum)
                return ConvertEnumToString((Enum)value);

            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return value is String ? $"\"{argumentValue}\"" : argumentValue;
        }

        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember =
                @enum.GetType()
                    .GetTypeInfo()
                    .GetMembers()
                    .Single(m => String.Equals(m.Name, @enum.ToString()));

            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }

    private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
    {
        public GraphQlScalarFieldCriteria(string fieldName, IDictionary<string, object> args) : base(fieldName, args)
        {
        }

        public override string Build(Formatting formatting, int level)
        {
            var builder = new StringBuilder();
            if (formatting == Formatting.Indented)
                builder.Append(GetIndentation(level));

            builder.Append(FieldName);
            builder.Append(BuildArgumentClause(formatting));
            return builder.ToString();
        }
    }

    private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
    {
        private readonly GraphQlQueryBuilder _objectQueryBuilder;

        public GraphQlObjectFieldCriteria(string fieldName, GraphQlQueryBuilder objectQueryBuilder, IDictionary<string, object> args) : base(fieldName, args)
        {
            _objectQueryBuilder = objectQueryBuilder;
        }

        public override string Build(Formatting formatting, int level)
        {
            var builder = new StringBuilder();
            var fieldName = FieldName;
            if (formatting == Formatting.Indented)
                fieldName = $"{GetIndentation(level)}{FieldName} ";

            builder.Append(fieldName);
            builder.Append(BuildArgumentClause(formatting));
            builder.Append(_objectQueryBuilder.Build(formatting, level + 1));
            return builder.ToString();
        }
    }
}

public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
{
    public TQueryBuilder WithAllFields()
    {
        IncludeAllFields();
        return (TQueryBuilder)this;
    }

    public TQueryBuilder WithAllScalarFields()
    {
        IncludeFields(AllFields.Where(f => !f.IsComplex));
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithScalarField(string fieldName, IDictionary<string, object> args = null)
    {
        IncludeScalarField(fieldName, args);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithObjectField(string fieldName, GraphQlQueryBuilder queryBuilder, IDictionary<string, object> args = null)
    {
        IncludeObjectField(fieldName, queryBuilder, args);
        return (TQueryBuilder)this;
    }
}
#endregion
