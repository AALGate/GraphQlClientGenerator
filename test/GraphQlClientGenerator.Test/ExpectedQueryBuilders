#region base classes
public class FieldMetadata
{
    public string Name { get; set; }
    public bool IsComplex { get; set; }
    public Type QueryBuilderType { get; set; }
}

public enum Formatting
{
    None,
    Indented
}

internal static class GraphQlQueryHelper
{
    public static string GetIndentation(int level, byte indentationSize)
    {
        return new String(' ', level * indentationSize);
    }
}

public abstract class GraphQlQueryBuilder
{
    private static readonly IList<FieldMetadata> EmptyFieldCollection = new List<FieldMetadata>();

    private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

    protected virtual IList<FieldMetadata> AllFields { get; } = EmptyFieldCollection;

    public void Clear()
    {
        _fieldCriteria.Clear();
    }

    public void IncludeAllFields()
    {
        IncludeFields(AllFields);
    }

    public string Build(Formatting formatting = Formatting.Indented, byte indentationSize = 2)
    {
        return Build(formatting, 1, indentationSize);
    }

    protected string Build(Formatting formatting, int level, byte indentationSize)
    {
        var builder = new StringBuilder();
        builder.Append("{");
        
        if (formatting == Formatting.Indented)
            builder.AppendLine();

        var separator = String.Empty;
        foreach (var criteria in _fieldCriteria.Values)
        {
            var fieldCriteria = criteria.Build(formatting, level, indentationSize);
            if (formatting == Formatting.Indented)
                builder.AppendLine(fieldCriteria);
            else if (!String.IsNullOrEmpty(fieldCriteria))
            {
                builder.Append(separator);
                builder.Append(fieldCriteria);
            }

            separator = ",";
        }

        if (formatting == Formatting.Indented)
            builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
        
        builder.Append("}");
        return builder.ToString();
    }

    protected void IncludeScalarField(string fieldName, IDictionary<string, object> args)
    {
        _fieldCriteria[fieldName] = new GraphQlScalarFieldCriteria(fieldName, args);
    }

    protected void IncludeObjectField(string fieldName, GraphQlQueryBuilder objectFieldQueryBuilder, IDictionary<string, object> args)
    {
        _fieldCriteria[fieldName] = new GraphQlObjectFieldCriteria(fieldName, objectFieldQueryBuilder, args);
    }

    protected void IncludeFields(IEnumerable<FieldMetadata> fields)
    {
        foreach (var field in fields)
        {
            if (field.QueryBuilderType == null)
                IncludeScalarField(field.Name, null);
            else
            {
                var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(field.QueryBuilderType);
                queryBuilder.IncludeAllFields();
                IncludeObjectField(field.Name, queryBuilder, null);
            }
        }
    }

    private abstract class GraphQlFieldCriteria
    {
        public readonly string FieldName;
        public readonly IDictionary<string, object> Args;

        protected GraphQlFieldCriteria(string fieldName, IDictionary<string, object> args)
        {
            FieldName = fieldName;
            Args = args;
        }

        public abstract string Build(Formatting formatting, int level, byte indentationSize);

        protected string BuildArgumentClause(Formatting formatting)
        {
            var separator = formatting == Formatting.Indented ? " " : null;
            return
                Args?.Count > 0
                    ? $"({String.Join($",{separator}", Args.Select(kvp => $"{kvp.Key}:{separator}{BuildArgumentValue(kvp.Value)}"))}){separator}"
                    : String.Empty;
        }

        private string BuildArgumentValue(object value)
        {
            if (value is Enum)
                return ConvertEnumToString((Enum)value);

            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return value is String || value is Guid ? $"\"{argumentValue}\"" : argumentValue;
        }

        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember =
                @enum.GetType()
                    .GetTypeInfo()
                    .GetMembers()
                    .Single(m => String.Equals(m.Name, @enum.ToString()));

            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }

    private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
    {
        public GraphQlScalarFieldCriteria(string fieldName, IDictionary<string, object> args) : base(fieldName, args)
        {
        }

        public override string Build(Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            if (formatting == Formatting.Indented)
                builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));

            builder.Append(FieldName);
            builder.Append(BuildArgumentClause(formatting));
            return builder.ToString();
        }
    }

    private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
    {
        private readonly GraphQlQueryBuilder _objectQueryBuilder;

        public GraphQlObjectFieldCriteria(string fieldName, GraphQlQueryBuilder objectQueryBuilder, IDictionary<string, object> args) : base(fieldName, args)
        {
            _objectQueryBuilder = objectQueryBuilder;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize)
        {
            if (_objectQueryBuilder._fieldCriteria.Count == 0)
                return String.Empty;

            var builder = new StringBuilder();
            var fieldName = FieldName;
            if (formatting == Formatting.Indented)
                fieldName = $"{GraphQlQueryHelper.GetIndentation(level, indentationSize)}{FieldName} ";

            builder.Append(fieldName);
            builder.Append(BuildArgumentClause(formatting));
            builder.Append(_objectQueryBuilder.Build(formatting, level + 1, indentationSize));
            return builder.ToString();
        }
    }
}

public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
{
    public TQueryBuilder WithAllFields()
    {
        IncludeAllFields();
        return (TQueryBuilder)this;
    }

    public TQueryBuilder WithAllScalarFields()
    {
        IncludeFields(AllFields.Where(f => !f.IsComplex));
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithScalarField(string fieldName, IDictionary<string, object> args = null)
    {
        IncludeScalarField(fieldName, args);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithObjectField(string fieldName, GraphQlQueryBuilder queryBuilder, IDictionary<string, object> args = null)
    {
        IncludeObjectField(fieldName, queryBuilder, args);
        return (TQueryBuilder)this;
    }
}
#endregion

#region builder classes
public enum Avatar
{
    [EnumMember(Value="floorhouse1")] Floorhouse1,
    [EnumMember(Value="floorhouse2")] Floorhouse2,
    [EnumMember(Value="floorhouse3")] Floorhouse3,
    [EnumMember(Value="castle")] Castle,
    [EnumMember(Value="apartment")] Apartment,
    [EnumMember(Value="cottage")] Cottage,
    [EnumMember(Value="rowhouse")] Rowhouse
}

public enum PriceLevel
{
    [EnumMember(Value="low")] Low,
    [EnumMember(Value="normal")] Normal,
    [EnumMember(Value="high")] High
}

public enum Resolution
{
    [EnumMember(Value="annual")] Annual,
    [EnumMember(Value="monthly")] Monthly
}

public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilder) }
        };

    public QueryQueryBuilder WithMe(MeQueryBuilder meQueryBuilder)
    {
        return WithObjectField("me", meQueryBuilder);
    }
}

public class MeQueryBuilder : GraphQlQueryBuilder<MeQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "firstName" },
            new FieldMetadata { Name = "lastName" },
            new FieldMetadata { Name = "fullName" },
            new FieldMetadata { Name = "ssn" },
            new FieldMetadata { Name = "email" },
            new FieldMetadata { Name = "language" },
            new FieldMetadata { Name = "tone" },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new FieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new FieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedQueryBuilder) },
            new FieldMetadata { Name = "energyStatements", IsComplex = true }
        };

    public MeQueryBuilder WithId()
    {
        return WithScalarField("id");
    }

    public MeQueryBuilder WithFirstName()
    {
        return WithScalarField("firstName");
    }

    public MeQueryBuilder WithLastName()
    {
        return WithScalarField("lastName");
    }

    public MeQueryBuilder WithFullName()
    {
        return WithScalarField("fullName");
    }

    public MeQueryBuilder WithSsn()
    {
        return WithScalarField("ssn");
    }

    public MeQueryBuilder WithEmail()
    {
        return WithScalarField("email");
    }

    public MeQueryBuilder WithLanguage()
    {
        return WithScalarField("language");
    }

    public MeQueryBuilder WithTone()
    {
        return WithScalarField("tone");
    }

    public MeQueryBuilder WithHome(HomeQueryBuilder homeQueryBuilder, string id = null)
    {
        var args = new Dictionary<string, object>();
        if (id != null)
            args.Add("id", id);

        return WithObjectField("home", homeQueryBuilder, args);
    }

    public MeQueryBuilder WithHomes(HomeQueryBuilder homeQueryBuilder)
    {
        return WithObjectField("homes", homeQueryBuilder);
    }

    public MeQueryBuilder WithFeed(FeedQueryBuilder feedQueryBuilder)
    {
        return WithObjectField("feed", feedQueryBuilder);
    }

    public MeQueryBuilder WithEnergyStatements(DateTimeOffset? from = null, DateTimeOffset? to = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithScalarField("energyStatements", args);
    }
}

public class HomeQueryBuilder : GraphQlQueryBuilder<HomeQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "avatar" },
            new FieldMetadata { Name = "timeZone" },
            new FieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
            new FieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(ConsumptionMonthQueryBuilder) },
            new FieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) },
            new FieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(PreLiveComparisonQueryBuilder) },
            new FieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "comparisonCurrentMonth", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "profile", IsComplex = true },
            new FieldMetadata { Name = "profileQuestions", IsComplex = true },
            new FieldMetadata { Name = "thermostat", IsComplex = true },
            new FieldMetadata { Name = "temperatures", IsComplex = true },
            new FieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(SignupStatusQueryBuilder) },
            new FieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(DisaggregationQueryBuilder) },
            new FieldMetadata { Name = "devices", IsComplex = true, QueryBuilderType = typeof(DeviceQueryBuilder) },
            new FieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(WeatherQueryBuilder) },
            new FieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(AwayModeQueryBuilder) }
        };

    public HomeQueryBuilder WithId()
    {
        return WithScalarField("id");
    }

    public HomeQueryBuilder WithAvatar()
    {
        return WithScalarField("avatar");
    }

    public HomeQueryBuilder WithTimeZone()
    {
        return WithScalarField("timeZone");
    }

    public HomeQueryBuilder WithSubscription(SubscriptionQueryBuilder subscriptionQueryBuilder)
    {
        return WithObjectField("subscription", subscriptionQueryBuilder);
    }

    public HomeQueryBuilder WithConsumptionMonths(ConsumptionMonthQueryBuilder consumptionMonthQueryBuilder, DateTimeOffset? from = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        return WithObjectField("consumptionMonths", consumptionMonthQueryBuilder, args);
    }

    public HomeQueryBuilder WithConsumption(ConsumptionQueryBuilder consumptionQueryBuilder, DateTimeOffset? from = null, DateTimeOffset? to = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithObjectField("consumption", consumptionQueryBuilder, args);
    }

    public HomeQueryBuilder WithPreLiveComparison(PreLiveComparisonQueryBuilder preLiveComparisonQueryBuilder)
    {
        return WithObjectField("preLiveComparison", preLiveComparisonQueryBuilder);
    }

    public HomeQueryBuilder WithComparisons(ComparisonQueryBuilder comparisonQueryBuilder, DateTimeOffset? from = null, DateTimeOffset? to = null, Resolution? resolution = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        if (resolution != null)
            args.Add("resolution", resolution);

        return WithObjectField("comparisons", comparisonQueryBuilder, args);
    }

    public HomeQueryBuilder WithComparisonCurrentMonth(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("comparisonCurrentMonth", comparisonQueryBuilder);
    }

    public HomeQueryBuilder WithProfile()
    {
        return WithScalarField("profile");
    }

    public HomeQueryBuilder WithProfileQuestions()
    {
        return WithScalarField("profileQuestions");
    }

    public HomeQueryBuilder WithThermostat()
    {
        return WithScalarField("thermostat");
    }

    public HomeQueryBuilder WithTemperatures(DateTimeOffset? from = null, DateTimeOffset? to = null, string resolution = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        if (resolution != null)
            args.Add("resolution", resolution);

        return WithScalarField("temperatures", args);
    }

    public HomeQueryBuilder WithSignupStatus(SignupStatusQueryBuilder signupStatusQueryBuilder)
    {
        return WithObjectField("signupStatus", signupStatusQueryBuilder);
    }

    public HomeQueryBuilder WithDisaggregation(DisaggregationQueryBuilder disaggregationQueryBuilder, Resolution? resolution = null)
    {
        var args = new Dictionary<string, object>();
        if (resolution != null)
            args.Add("resolution", resolution);

        return WithObjectField("disaggregation", disaggregationQueryBuilder, args);
    }

    public HomeQueryBuilder WithDevices(DeviceQueryBuilder deviceQueryBuilder)
    {
        return WithObjectField("devices", deviceQueryBuilder);
    }

    public HomeQueryBuilder WithWeather(WeatherQueryBuilder weatherQueryBuilder)
    {
        return WithObjectField("weather", weatherQueryBuilder);
    }

    public HomeQueryBuilder WithAwayMode(AwayModeQueryBuilder awayModeQueryBuilder)
    {
        return WithObjectField("awayMode", awayModeQueryBuilder);
    }
}

public class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "validFrom" },
            new FieldMetadata { Name = "validTo" },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "billingRegionId" },
            new FieldMetadata { Name = "energyStatements", IsComplex = true },
            new FieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilder) }
        };

    public SubscriptionQueryBuilder WithId()
    {
        return WithScalarField("id");
    }

    public SubscriptionQueryBuilder WithValidFrom()
    {
        return WithScalarField("validFrom");
    }

    public SubscriptionQueryBuilder WithValidTo()
    {
        return WithScalarField("validTo");
    }

    public SubscriptionQueryBuilder WithStatus()
    {
        return WithScalarField("status");
    }

    public SubscriptionQueryBuilder WithBillingRegionId()
    {
        return WithScalarField("billingRegionId");
    }

    public SubscriptionQueryBuilder WithEnergyStatements(DateTimeOffset? from = null, DateTimeOffset? to = null)
    {
        var args = new Dictionary<string, object>();
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithScalarField("energyStatements", args);
    }

    public SubscriptionQueryBuilder WithPriceRating(PriceRatingQueryBuilder priceRatingQueryBuilder)
    {
        return WithObjectField("priceRating", priceRatingQueryBuilder);
    }
}

public class PriceRatingQueryBuilder : GraphQlQueryBuilder<PriceRatingQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "minPrice" },
            new FieldMetadata { Name = "maxPrice" },
            new FieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(PriceRatingEntryQueryBuilder) }
        };

    public PriceRatingQueryBuilder WithMinPrice()
    {
        return WithScalarField("minPrice");
    }

    public PriceRatingQueryBuilder WithMaxPrice()
    {
        return WithScalarField("maxPrice");
    }

    public PriceRatingQueryBuilder WithEntries(PriceRatingEntryQueryBuilder priceRatingEntryQueryBuilder)
    {
        return WithObjectField("entries", priceRatingEntryQueryBuilder);
    }
}

public class PriceRatingEntryQueryBuilder : GraphQlQueryBuilder<PriceRatingEntryQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "time" },
            new FieldMetadata { Name = "price" },
            new FieldMetadata { Name = "level" },
            new FieldMetadata { Name = "difference" }
        };

    public PriceRatingEntryQueryBuilder WithTime()
    {
        return WithScalarField("time");
    }

    public PriceRatingEntryQueryBuilder WithPrice()
    {
        return WithScalarField("price");
    }

    public PriceRatingEntryQueryBuilder WithLevel()
    {
        return WithScalarField("level");
    }

    public PriceRatingEntryQueryBuilder WithDifference()
    {
        return WithScalarField("difference");
    }
}

public class ConsumptionMonthQueryBuilder : GraphQlQueryBuilder<ConsumptionMonthQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "kwh" },
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "kwhEstimate" },
            new FieldMetadata { Name = "costEstimate" }
        };

    public ConsumptionMonthQueryBuilder WithYear()
    {
        return WithScalarField("year");
    }

    public ConsumptionMonthQueryBuilder WithMonth()
    {
        return WithScalarField("month");
    }

    public ConsumptionMonthQueryBuilder WithKwh()
    {
        return WithScalarField("kwh");
    }

    public ConsumptionMonthQueryBuilder WithCost()
    {
        return WithScalarField("cost");
    }

    public ConsumptionMonthQueryBuilder WithIsComplete()
    {
        return WithScalarField("isComplete");
    }

    public ConsumptionMonthQueryBuilder WithKwhEstimate()
    {
        return WithScalarField("kwhEstimate");
    }

    public ConsumptionMonthQueryBuilder WithCostEstimate()
    {
        return WithScalarField("costEstimate");
    }
}

public class ConsumptionQueryBuilder : GraphQlQueryBuilder<ConsumptionQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "annualValues", IsComplex = true },
            new FieldMetadata { Name = "monthlyValues", IsComplex = true },
            new FieldMetadata { Name = "weeklyValues", IsComplex = true },
            new FieldMetadata { Name = "dailyValues", IsComplex = true },
            new FieldMetadata { Name = "hourlyValues", IsComplex = true },
            new FieldMetadata { Name = "totalConsumption" },
            new FieldMetadata { Name = "energyCost" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "latestTransactionTimestamp" },
            new FieldMetadata { Name = "timeZone" }
        };

    public ConsumptionQueryBuilder WithAnnualValues()
    {
        return WithScalarField("annualValues");
    }

    public ConsumptionQueryBuilder WithMonthlyValues()
    {
        return WithScalarField("monthlyValues");
    }

    public ConsumptionQueryBuilder WithWeeklyValues()
    {
        return WithScalarField("weeklyValues");
    }

    public ConsumptionQueryBuilder WithDailyValues()
    {
        return WithScalarField("dailyValues");
    }

    public ConsumptionQueryBuilder WithHourlyValues()
    {
        return WithScalarField("hourlyValues");
    }

    public ConsumptionQueryBuilder WithTotalConsumption()
    {
        return WithScalarField("totalConsumption");
    }

    public ConsumptionQueryBuilder WithEnergyCost()
    {
        return WithScalarField("energyCost");
    }

    public ConsumptionQueryBuilder WithTotalCost()
    {
        return WithScalarField("totalCost");
    }

    public ConsumptionQueryBuilder WithCurrency()
    {
        return WithScalarField("currency");
    }

    public ConsumptionQueryBuilder WithLatestTransactionTimestamp()
    {
        return WithScalarField("latestTransactionTimestamp");
    }

    public ConsumptionQueryBuilder WithTimeZone()
    {
        return WithScalarField("timeZone");
    }
}

public class PreLiveComparisonQueryBuilder : GraphQlQueryBuilder<PreLiveComparisonQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "homeId" },
            new FieldMetadata { Name = "basedOnActuals" },
            new FieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) }
        };

    public PreLiveComparisonQueryBuilder WithHomeId()
    {
        return WithScalarField("homeId");
    }

    public PreLiveComparisonQueryBuilder WithBasedOnActuals()
    {
        return WithScalarField("basedOnActuals");
    }

    public PreLiveComparisonQueryBuilder WithPreviousYear(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("previousYear", comparisonQueryBuilder);
    }

    public PreLiveComparisonQueryBuilder WithPreviousYearMonths(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("previousYearMonths", comparisonQueryBuilder);
    }
}

public class ComparisonQueryBuilder : GraphQlQueryBuilder<ComparisonQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "resolution" },
            new FieldMetadata { Name = "homeEfficency" },
            new FieldMetadata { Name = "homeEfficencyDescription" },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new FieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new FieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) }
        };

    public ComparisonQueryBuilder WithYear()
    {
        return WithScalarField("year");
    }

    public ComparisonQueryBuilder WithMonth()
    {
        return WithScalarField("month");
    }

    public ComparisonQueryBuilder WithResolution()
    {
        return WithScalarField("resolution");
    }

    public ComparisonQueryBuilder WithHomeEfficency()
    {
        return WithScalarField("homeEfficency");
    }

    public ComparisonQueryBuilder WithHomeEfficencyDescription()
    {
        return WithScalarField("homeEfficencyDescription");
    }

    public ComparisonQueryBuilder WithHome(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("home", comparisonDataQueryBuilder);
    }

    public ComparisonQueryBuilder WithAverage(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("average", comparisonDataQueryBuilder);
    }

    public ComparisonQueryBuilder WithEfficient(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("efficient", comparisonDataQueryBuilder);
    }
}

public class ComparisonDataQueryBuilder : GraphQlQueryBuilder<ComparisonDataQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "consumption" }
        };

    public ComparisonDataQueryBuilder WithCost()
    {
        return WithScalarField("cost");
    }

    public ComparisonDataQueryBuilder WithConsumption()
    {
        return WithScalarField("consumption");
    }
}

public class SignupStatusQueryBuilder : GraphQlQueryBuilder<SignupStatusQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new FieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new FieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) }
        };

    public SignupStatusQueryBuilder WithFeedStep(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("feedStep", processStepQueryBuilder);
    }

    public SignupStatusQueryBuilder WithAvatarStep(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("avatarStep", processStepQueryBuilder);
    }

    public SignupStatusQueryBuilder WithSteps(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("steps", processStepQueryBuilder);
    }
}

public class ProcessStepQueryBuilder : GraphQlQueryBuilder<ProcessStepQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" }
        };

    public ProcessStepQueryBuilder WithTimestamp()
    {
        return WithScalarField("timestamp");
    }

    public ProcessStepQueryBuilder WithIsComplete()
    {
        return WithScalarField("isComplete");
    }

    public ProcessStepQueryBuilder WithTitle()
    {
        return WithScalarField("title");
    }

    public ProcessStepQueryBuilder WithDescription()
    {
        return WithScalarField("description");
    }
}

public class DisaggregationQueryBuilder : GraphQlQueryBuilder<DisaggregationQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "fixedConsumptionKwh" },
            new FieldMetadata { Name = "fixedConsumptionKwhPercent" },
            new FieldMetadata { Name = "fixedConsumptionCost" },
            new FieldMetadata { Name = "heatingConsumptionKwh" },
            new FieldMetadata { Name = "heatingConsumptionKwhPercent" },
            new FieldMetadata { Name = "heatingConsumptionCost" },
            new FieldMetadata { Name = "behaviorConsumptionKwh" },
            new FieldMetadata { Name = "behaviorConsumptionKwhPercent" },
            new FieldMetadata { Name = "behaviorConsumptionCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "isValid" }
        };

    public DisaggregationQueryBuilder WithYear()
    {
        return WithScalarField("year");
    }

    public DisaggregationQueryBuilder WithMonth()
    {
        return WithScalarField("month");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwh()
    {
        return WithScalarField("fixedConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwhPercent()
    {
        return WithScalarField("fixedConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionCost()
    {
        return WithScalarField("fixedConsumptionCost");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwh()
    {
        return WithScalarField("heatingConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwhPercent()
    {
        return WithScalarField("heatingConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionCost()
    {
        return WithScalarField("heatingConsumptionCost");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwh()
    {
        return WithScalarField("behaviorConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwhPercent()
    {
        return WithScalarField("behaviorConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionCost()
    {
        return WithScalarField("behaviorConsumptionCost");
    }

    public DisaggregationQueryBuilder WithCurrency()
    {
        return WithScalarField("currency");
    }

    public DisaggregationQueryBuilder WithIsValid()
    {
        return WithScalarField("isValid");
    }
}

public class DeviceQueryBuilder : GraphQlQueryBuilder<DeviceQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "deviceId" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "isControllable" },
            new FieldMetadata { Name = "externalId" },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "isBatteryLow" },
            new FieldMetadata { Name = "isSignalLow" },
            new FieldMetadata { Name = "isAlive" },
            new FieldMetadata { Name = "capabilities", IsComplex = true },
            new FieldMetadata { Name = "properties", IsComplex = true }
        };

    public DeviceQueryBuilder WithDeviceId()
    {
        return WithScalarField("deviceId");
    }

    public DeviceQueryBuilder WithType()
    {
        return WithScalarField("type");
    }

    public DeviceQueryBuilder WithIsControllable()
    {
        return WithScalarField("isControllable");
    }

    public DeviceQueryBuilder WithExternalId()
    {
        return WithScalarField("externalId");
    }

    public DeviceQueryBuilder WithName()
    {
        return WithScalarField("name");
    }

    public DeviceQueryBuilder WithIsBatteryLow()
    {
        return WithScalarField("isBatteryLow");
    }

    public DeviceQueryBuilder WithIsSignalLow()
    {
        return WithScalarField("isSignalLow");
    }

    public DeviceQueryBuilder WithIsAlive()
    {
        return WithScalarField("isAlive");
    }

    public DeviceQueryBuilder WithCapabilities()
    {
        return WithScalarField("capabilities");
    }

    public DeviceQueryBuilder WithProperties()
    {
        return WithScalarField("properties");
    }
}

public class WeatherQueryBuilder : GraphQlQueryBuilder<WeatherQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "temperature" },
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "summary" },
            new FieldMetadata { Name = "type" }
        };

    public WeatherQueryBuilder WithTemperature()
    {
        return WithScalarField("temperature");
    }

    public WeatherQueryBuilder WithTimestamp()
    {
        return WithScalarField("timestamp");
    }

    public WeatherQueryBuilder WithSummary()
    {
        return WithScalarField("summary");
    }

    public WeatherQueryBuilder WithType()
    {
        return WithScalarField("type");
    }
}

public class AwayModeQueryBuilder : GraphQlQueryBuilder<AwayModeQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "isSupported" },
            new FieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(AwayModeSettingsQueryBuilder) }
        };

    public AwayModeQueryBuilder WithIsSupported()
    {
        return WithScalarField("isSupported");
    }

    public AwayModeQueryBuilder WithSettings(AwayModeSettingsQueryBuilder awayModeSettingsQueryBuilder)
    {
        return WithObjectField("settings", awayModeSettingsQueryBuilder);
    }
}

public class AwayModeSettingsQueryBuilder : GraphQlQueryBuilder<AwayModeSettingsQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "from" },
            new FieldMetadata { Name = "to" }
        };

    public AwayModeSettingsQueryBuilder WithFrom()
    {
        return WithScalarField("from");
    }

    public AwayModeSettingsQueryBuilder WithTo()
    {
        return WithScalarField("to");
    }
}

public class FeedQueryBuilder : GraphQlQueryBuilder<FeedQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "numberOfItems" },
            new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(FeedItemQueryBuilder) },
            new FieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(PushNotificationQueryBuilder) }
        };

    public FeedQueryBuilder WithNumberOfItems()
    {
        return WithScalarField("numberOfItems");
    }

    public FeedQueryBuilder WithItems(FeedItemQueryBuilder feedItemQueryBuilder, int? page = null, int? pageSize = null)
    {
        var args = new Dictionary<string, object>();
        if (page != null)
            args.Add("page", page);

        if (pageSize != null)
            args.Add("pageSize", pageSize);

        return WithObjectField("items", feedItemQueryBuilder, args);
    }

    public FeedQueryBuilder WithPushNotifications(PushNotificationQueryBuilder pushNotificationQueryBuilder)
    {
        return WithObjectField("pushNotifications", pushNotificationQueryBuilder);
    }
}

public class FeedItemQueryBuilder : GraphQlQueryBuilder<FeedItemQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "messageTypeId" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" },
            new FieldMetadata { Name = "createdAt" },
            new FieldMetadata { Name = "modifiedAt" }
        };

    public FeedItemQueryBuilder WithId()
    {
        return WithScalarField("id");
    }

    public FeedItemQueryBuilder WithMessageTypeId()
    {
        return WithScalarField("messageTypeId");
    }

    public FeedItemQueryBuilder WithLink()
    {
        return WithScalarField("link");
    }

    public FeedItemQueryBuilder WithText()
    {
        return WithScalarField("text");
    }

    public FeedItemQueryBuilder WithCreatedAt()
    {
        return WithScalarField("createdAt");
    }

    public FeedItemQueryBuilder WithModifiedAt()
    {
        return WithScalarField("modifiedAt");
    }
}

public class PushNotificationQueryBuilder : GraphQlQueryBuilder<PushNotificationQueryBuilder>
{
    protected override IList<FieldMetadata> AllFields { get; } =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" }
        };

    public PushNotificationQueryBuilder WithId()
    {
        return WithScalarField("id");
    }

    public PushNotificationQueryBuilder WithLink()
    {
        return WithScalarField("link");
    }

    public PushNotificationQueryBuilder WithText()
    {
        return WithScalarField("text");
    }
}
#endregion
