#region base classes
public class FieldMetadata
{
    public string Name { get; set; }
    public bool IsComplex { get; set; }
    public Type QueryBuilderType { get; set; }
}

public enum Formatting
{
    None,
    Indented
}

internal static class GraphQlQueryHelper
{
    private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);

    public static string GetIndentation(int level, byte indentationSize)
    {
        return new String(' ', level * indentationSize);
    }

    public static string BuildArgumentValue(object value, Formatting formatting, int level, byte indentationSize)
    {
        if (value is JValue jValue)
        {
            switch (jValue.Type)
            {
                case JTokenType.Null: return "null";
                case JTokenType.Integer:
                case JTokenType.Float:
                case JTokenType.Boolean:
                    return BuildArgumentValue(jValue.Value, formatting, level, indentationSize);
                default:
                    return $"\"{jValue.Value}\"";
            }
        }

        if (value is Enum @enum)
            return ConvertEnumToString(@enum);

        if (value is bool @bool)
            return @bool ? "true" : "false";

        if (value is DateTime dateTime)
            return $"\"{dateTime:O}\"";

        if (value is DateTimeOffset dateTimeOffset)
            return $"\"{dateTimeOffset:O}\"";

        if (value is IGraphQlInputObject inputObject)
            return BuildInputObject(inputObject, formatting, level + 2, indentationSize);

        if (value is String || value is Guid)
            return $"\"{value}\"";

        if (value is JProperty jProperty)
        {
            if (RegexWhiteSpace.IsMatch(jProperty.Name))
			    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");

            return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, formatting, level, indentationSize)}";
        }

        if (value is JObject jObject)
            return BuildEnumerableArgument(jObject, formatting, level + 1, indentationSize, '{', '}');

        if (value is IEnumerable enumerable)
            return BuildEnumerableArgument(enumerable, formatting, level, indentationSize, '[', ']');

        if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
            return Convert.ToString(value, CultureInfo.InvariantCulture);

        var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
        return $"\"{argumentValue}\"";
    }

    private static string BuildEnumerableArgument(IEnumerable enumerable, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
    {
        var builder = new StringBuilder();
        builder.Append(openingSymbol);
        var delimiter = String.Empty;
        foreach (var item in enumerable)
        {
            builder.Append(delimiter);

            if (formatting == Formatting.Indented)
            {
                builder.AppendLine();
                builder.Append(GetIndentation(level + 1, indentationSize));
            }

            builder.Append(BuildArgumentValue(item, formatting, level, indentationSize));
            delimiter = ",";
        }

        builder.Append(closingSymbol);
        return builder.ToString();
    }

    public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
    {
        var builder = new StringBuilder();
        builder.Append("{");

        var isIndentedFormatting = formatting == Formatting.Indented;
        string valueSeparator;
        if (isIndentedFormatting)
        {
            builder.AppendLine();
            valueSeparator = ": ";
        }
        else
            valueSeparator = ":";

        var separator = String.Empty;
        foreach (var propertyValue in inputObject.GetPropertyValues().Where(p => p.Value != null))
        {
            var value = BuildArgumentValue(propertyValue.Value, formatting, level, indentationSize);
            builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
            builder.Append(propertyValue.Name);
            builder.Append(valueSeparator);
            builder.Append(value);

            separator = ",";

            if (isIndentedFormatting)
                builder.AppendLine();
        }

        if (isIndentedFormatting)
            builder.Append(GetIndentation(level - 1, indentationSize));

        builder.Append("}");

        return builder.ToString();
    }

    private static string ConvertEnumToString(Enum @enum)
    {
        var enumMember = @enum.GetType().GetTypeInfo().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");

        var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));

        return enumMemberAttribute == null
            ? @enum.ToString()
            : enumMemberAttribute.Value;
    }
}

public struct InputPropertyInfo
{
    public string Name { get; set; }
    public object Value { get; set; }
}

internal interface IGraphQlInputObject
{
    IEnumerable<InputPropertyInfo> GetPropertyValues();
}

public interface IGraphQlQueryBuilder
{
    void Clear();
    void IncludeAllFields();
    string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
}

public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
{
    private static readonly Type[] MethodParameterTypeString = { typeof(String) };
    private static readonly string[] MethodParameterString = { null };

    private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();

    protected virtual string Prefix { get { return null; } }

    protected abstract IList<FieldMetadata> AllFields { get; }

    public string Alias { get; }

    protected GraphQlQueryBuilder(string alias = null)
    {
        ValidateAlias(alias);
        Alias = alias;
    }

    public virtual void Clear()
    {
        _fieldCriteria.Clear();
    }

    void IGraphQlQueryBuilder.IncludeAllFields()
    {
        IncludeAllFields();
    }

    public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
    {
        return Build(formatting, 1, indentationSize);
    }

    protected void IncludeAllFields()
    {
        IncludeFields(AllFields);
    }

    protected virtual string Build(Formatting formatting, int level, byte indentationSize)
    {
        var isIndentedFormatting = formatting == Formatting.Indented;

        var builder = new StringBuilder();

        if (!String.IsNullOrEmpty(Prefix))
        {
            builder.Append(Prefix);

            if (!String.IsNullOrEmpty(Alias))
            {
                builder.Append(" ");
                builder.Append(Alias);

                if (isIndentedFormatting)
                    builder.Append(" ");
            }
            else if (isIndentedFormatting)
                builder.Append(" ");
        }

        builder.Append("{");

        if (isIndentedFormatting)
            builder.AppendLine();

        var separator = String.Empty;
        foreach (var criteria in _fieldCriteria.Values)
        {
            var fieldCriteria = criteria.Build(formatting, level, indentationSize);
            if (isIndentedFormatting)
                builder.AppendLine(fieldCriteria);
            else if (!String.IsNullOrEmpty(fieldCriteria))
            {
                builder.Append(separator);
                builder.Append(fieldCriteria);
            }

            separator = ",";
        }

        if (isIndentedFormatting)
            builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
        
        builder.Append("}");
        return builder.ToString();
    }

    protected void IncludeScalarField(string fieldName, string alias, IDictionary<string, object> args)
    {
        ValidateAlias(alias);
        _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args);
    }

    protected void IncludeObjectField(string fieldName, GraphQlQueryBuilder objectFieldQueryBuilder, IDictionary<string, object> args)
    {
        _fieldCriteria[objectFieldQueryBuilder.Alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, objectFieldQueryBuilder, args);
    }

    protected void ExcludeField(string fieldName)
    {
        if (fieldName == null)
            throw new ArgumentNullException(nameof(fieldName));

        _fieldCriteria.Remove(fieldName);
    }

    protected void IncludeFields(IEnumerable<FieldMetadata> fields)
    {
        foreach (var field in fields)
        {
            if (field.QueryBuilderType == null)
                IncludeScalarField(field.Name, null, null);
            else
            {
                var builderType = GetType();
                if (builderType.IsAssignableFrom(field.QueryBuilderType))
                    throw new InvalidOperationException($"Field '{builderType.Name}.{field.Name}' cannot be added because its type is the same as the parent type (or inherited) and leads to infinite recursion. ");

                var constructor = field.QueryBuilderType.GetConstructor(MethodParameterTypeString);
                if (constructor == null)
                    throw new InvalidOperationException($"{field.QueryBuilderType.FullName} constructor not found");

                var queryBuilder = (GraphQlQueryBuilder)constructor.Invoke(MethodParameterString);
                queryBuilder.IncludeAllFields();
                IncludeObjectField(field.Name, queryBuilder, null);
            }
        }
    }

    private static void ValidateAlias(string alias)
    {
        if (alias != null && String.IsNullOrWhiteSpace(alias))
            throw new ArgumentException("Value must not be white space. ", nameof(alias));
    }

    private abstract class GraphQlFieldCriteria
    {
        protected readonly string FieldName;
        private readonly IDictionary<string, object> _args;

        protected GraphQlFieldCriteria(string fieldName, IDictionary<string, object> args)
        {
            FieldName = fieldName;
            _args = args;
        }

        public abstract string Build(Formatting formatting, int level, byte indentationSize);

        protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
        {
            var separator = formatting == Formatting.Indented ? " " : null;
            return
                _args?.Count > 0
                    ? $"({String.Join($",{separator}", _args.Select(kvp => $"{kvp.Key}:{separator}{GraphQlQueryHelper.BuildArgumentValue(kvp.Value, formatting, level, indentationSize)}"))}){separator}"
                    : String.Empty;
        }

        protected static string BuildAliasPrefix(string alias, Formatting formatting)
        {
            var separator = formatting == Formatting.Indented ? " " : String.Empty;
            return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
        }
    }

    private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
    {
        private readonly string _alias;

        public GraphQlScalarFieldCriteria(string fieldName, string alias, IDictionary<string, object> args) : base(fieldName, args)
        {
            _alias = alias;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            if (formatting == Formatting.Indented)
                builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));

            builder.Append(BuildAliasPrefix(_alias, formatting));
            builder.Append(FieldName);
            builder.Append(BuildArgumentClause(formatting, level, indentationSize));
            return builder.ToString();
        }
    }

    private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
    {
        private readonly GraphQlQueryBuilder _objectQueryBuilder;

        public GraphQlObjectFieldCriteria(string fieldName, GraphQlQueryBuilder objectQueryBuilder, IDictionary<string, object> args) : base(fieldName, args)
        {
            _objectQueryBuilder = objectQueryBuilder;
        }

        public override string Build(Formatting formatting, int level, byte indentationSize)
        {
            if (_objectQueryBuilder._fieldCriteria.Count == 0)
                return String.Empty;

            var builder = new StringBuilder();

            if (formatting == Formatting.Indented)
                builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));

            builder.Append(BuildAliasPrefix(_objectQueryBuilder.Alias, formatting));
            builder.Append(FieldName);

            if (formatting == Formatting.Indented)
                builder.Append(" ");

            builder.Append(BuildArgumentClause(formatting, level, indentationSize));
            builder.Append(_objectQueryBuilder.Build(formatting, level + 1, indentationSize));
            return builder.ToString();
        }
    }
}

public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
{
    protected GraphQlQueryBuilder(string alias = null) : base(alias)
    {
    }

    public TQueryBuilder WithAllFields()
    {
        IncludeAllFields();
        return (TQueryBuilder)this;
    }

    public TQueryBuilder WithAllScalarFields()
    {
        IncludeFields(AllFields.Where(f => !f.IsComplex));
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithScalarField(string fieldName, string alias = null, IDictionary<string, object> args = null)
    {
        IncludeScalarField(fieldName, alias, args);
        return (TQueryBuilder)this;
    }

    protected TQueryBuilder WithObjectField(string fieldName, GraphQlQueryBuilder queryBuilder, IDictionary<string, object> args = null)
    {
        IncludeObjectField(fieldName, queryBuilder, args);
        return (TQueryBuilder)this;
    }

    public TQueryBuilder ExceptField(string fieldName)
    {
        ExcludeField(fieldName);
        return (TQueryBuilder)this;
    }
}
#endregion

#region shared types
public enum Avatar
{
    [EnumMember(Value="floorhouse1")] Floorhouse1,
    [EnumMember(Value="floorhouse2")] Floorhouse2,
    [EnumMember(Value="floorhouse3")] Floorhouse3,
    [EnumMember(Value="castle")] Castle,
    [EnumMember(Value="apartment")] Apartment,
    [EnumMember(Value="cottage")] Cottage,
    [EnumMember(Value="rowhouse")] Rowhouse
}

public enum PriceLevel
{
    [EnumMember(Value="low")] Low,
    [EnumMember(Value="normal")] Normal,
    [EnumMember(Value="high")] High
}

public enum Resolution
{
    [EnumMember(Value="annual")] Annual,
    [EnumMember(Value="monthly")] Monthly
}

#endregion

#region builder classes
public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilder) }
        };

    protected override string Prefix { get { return "query"; } } 

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public QueryQueryBuilder(string alias = null) : base(alias)
    {
    }

    public QueryQueryBuilder WithMe(MeQueryBuilder meQueryBuilder)
    {
        return WithObjectField("me", meQueryBuilder);
    }

    public QueryQueryBuilder ExceptMe()
    {
        return ExceptField("me");
    }
}

public partial class MeQueryBuilder : GraphQlQueryBuilder<MeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "firstName" },
            new FieldMetadata { Name = "lastName" },
            new FieldMetadata { Name = "fullName" },
            new FieldMetadata { Name = "ssn" },
            new FieldMetadata { Name = "email" },
            new FieldMetadata { Name = "language" },
            new FieldMetadata { Name = "tone" },
            new FieldMetadata { Name = "avatars", IsComplex = true },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new FieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new FieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedQueryBuilder) },
            new FieldMetadata { Name = "energyStatements", IsComplex = true }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public MeQueryBuilder(string alias = null) : base(alias)
    {
    }

    public MeQueryBuilder WithId(string alias = null)
    {
        return WithScalarField("id", alias);
    }

    public MeQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public MeQueryBuilder WithFirstName(string alias = null)
    {
        return WithScalarField("firstName", alias);
    }

    public MeQueryBuilder ExceptFirstName()
    {
        return ExceptField("firstName");
    }

    public MeQueryBuilder WithLastName(string alias = null)
    {
        return WithScalarField("lastName", alias);
    }

    public MeQueryBuilder ExceptLastName()
    {
        return ExceptField("lastName");
    }

    public MeQueryBuilder WithFullName(string alias = null)
    {
        return WithScalarField("fullName", alias);
    }

    public MeQueryBuilder ExceptFullName()
    {
        return ExceptField("fullName");
    }

    public MeQueryBuilder WithSsn(string alias = null)
    {
        return WithScalarField("ssn", alias);
    }

    public MeQueryBuilder ExceptSsn()
    {
        return ExceptField("ssn");
    }

    public MeQueryBuilder WithEmail(string alias = null)
    {
        return WithScalarField("email", alias);
    }

    public MeQueryBuilder ExceptEmail()
    {
        return ExceptField("email");
    }

    public MeQueryBuilder WithLanguage(string alias = null)
    {
        return WithScalarField("language", alias);
    }

    public MeQueryBuilder ExceptLanguage()
    {
        return ExceptField("language");
    }

    public MeQueryBuilder WithTone(string alias = null)
    {
        return WithScalarField("tone", alias);
    }

    public MeQueryBuilder ExceptTone()
    {
        return ExceptField("tone");
    }

    public MeQueryBuilder WithAvatars(string alias = null)
    {
        return WithScalarField("avatars", alias);
    }

    public MeQueryBuilder ExceptAvatars()
    {
        return ExceptField("avatars");
    }

    public MeQueryBuilder WithHome(HomeQueryBuilder homeQueryBuilder, string @object = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (@object != null)
            args.Add("object", @object);

        return WithObjectField("home", homeQueryBuilder, args);
    }

    public MeQueryBuilder ExceptHome()
    {
        return ExceptField("home");
    }

    public MeQueryBuilder WithHomes(HomeQueryBuilder homeQueryBuilder)
    {
        return WithObjectField("homes", homeQueryBuilder);
    }

    public MeQueryBuilder ExceptHomes()
    {
        return ExceptField("homes");
    }

    public MeQueryBuilder WithFeed(FeedQueryBuilder feedQueryBuilder)
    {
        return WithObjectField("feed", feedQueryBuilder);
    }

    public MeQueryBuilder ExceptFeed()
    {
        return ExceptField("feed");
    }

    public MeQueryBuilder WithEnergyStatements(DateTimeOffset? from = null, DateTimeOffset? to = null, string alias = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithScalarField("energyStatements", alias, args);
    }

    public MeQueryBuilder ExceptEnergyStatements()
    {
        return ExceptField("energyStatements");
    }
}

public partial class HomeQueryBuilder : GraphQlQueryBuilder<HomeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "avatar" },
            new FieldMetadata { Name = "timeZone" },
            new FieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
            new FieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(ConsumptionMonthQueryBuilder) },
            new FieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) },
            new FieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(PreLiveComparisonQueryBuilder) },
            new FieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "comparisonCurrentMonth", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "profile", IsComplex = true },
            new FieldMetadata { Name = "profileQuestions", IsComplex = true },
            new FieldMetadata { Name = "thermostat", IsComplex = true },
            new FieldMetadata { Name = "temperatures", IsComplex = true },
            new FieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(SignupStatusQueryBuilder) },
            new FieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(DisaggregationQueryBuilder) },
            new FieldMetadata { Name = "devices", IsComplex = true, QueryBuilderType = typeof(DeviceQueryBuilder) },
            new FieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(WeatherQueryBuilder) },
            new FieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(VacationModeQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeQueryBuilder(string alias = null) : base(alias)
    {
    }

    public HomeQueryBuilder WithId(string alias = null)
    {
        return WithScalarField("id", alias);
    }

    public HomeQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public HomeQueryBuilder WithAvatar(string alias = null)
    {
        return WithScalarField("avatar", alias);
    }

    public HomeQueryBuilder ExceptAvatar()
    {
        return ExceptField("avatar");
    }

    public HomeQueryBuilder WithTimeZone(string alias = null)
    {
        return WithScalarField("timeZone", alias);
    }

    public HomeQueryBuilder ExceptTimeZone()
    {
        return ExceptField("timeZone");
    }

    public HomeQueryBuilder WithSubscription(SubscriptionQueryBuilder subscriptionQueryBuilder)
    {
        return WithObjectField("subscription", subscriptionQueryBuilder);
    }

    public HomeQueryBuilder ExceptSubscription()
    {
        return ExceptField("subscription");
    }

    public HomeQueryBuilder WithConsumptionMonths(ConsumptionMonthQueryBuilder consumptionMonthQueryBuilder, DateTimeOffset? from = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        return WithObjectField("consumptionMonths", consumptionMonthQueryBuilder, args);
    }

    public HomeQueryBuilder ExceptConsumptionMonths()
    {
        return ExceptField("consumptionMonths");
    }

    public HomeQueryBuilder WithConsumption(ConsumptionQueryBuilder consumptionQueryBuilder, DateTimeOffset? from = null, DateTimeOffset? to = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithObjectField("consumption", consumptionQueryBuilder, args);
    }

    public HomeQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }

    public HomeQueryBuilder WithPreLiveComparison(PreLiveComparisonQueryBuilder preLiveComparisonQueryBuilder)
    {
        return WithObjectField("preLiveComparison", preLiveComparisonQueryBuilder);
    }

    public HomeQueryBuilder ExceptPreLiveComparison()
    {
        return ExceptField("preLiveComparison");
    }

    public HomeQueryBuilder WithComparisons(ComparisonQueryBuilder comparisonQueryBuilder, DateTimeOffset? from = null, DateTimeOffset? to = null, Resolution? resolution = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        if (resolution != null)
            args.Add("resolution", resolution);

        return WithObjectField("comparisons", comparisonQueryBuilder, args);
    }

    public HomeQueryBuilder ExceptComparisons()
    {
        return ExceptField("comparisons");
    }

    public HomeQueryBuilder WithComparisonCurrentMonth(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("comparisonCurrentMonth", comparisonQueryBuilder);
    }

    public HomeQueryBuilder ExceptComparisonCurrentMonth()
    {
        return ExceptField("comparisonCurrentMonth");
    }

    public HomeQueryBuilder WithProfile(string alias = null)
    {
        return WithScalarField("profile", alias);
    }

    public HomeQueryBuilder ExceptProfile()
    {
        return ExceptField("profile");
    }

    public HomeQueryBuilder WithProfileQuestions(string alias = null)
    {
        return WithScalarField("profileQuestions", alias);
    }

    public HomeQueryBuilder ExceptProfileQuestions()
    {
        return ExceptField("profileQuestions");
    }

    public HomeQueryBuilder WithThermostat(string alias = null)
    {
        return WithScalarField("thermostat", alias);
    }

    public HomeQueryBuilder ExceptThermostat()
    {
        return ExceptField("thermostat");
    }

    public HomeQueryBuilder WithTemperatures(DateTimeOffset? from = null, DateTimeOffset? to = null, string resolution = null, string alias = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        if (resolution != null)
            args.Add("resolution", resolution);

        return WithScalarField("temperatures", alias, args);
    }

    public HomeQueryBuilder ExceptTemperatures()
    {
        return ExceptField("temperatures");
    }

    public HomeQueryBuilder WithSignupStatus(SignupStatusQueryBuilder signupStatusQueryBuilder)
    {
        return WithObjectField("signupStatus", signupStatusQueryBuilder);
    }

    public HomeQueryBuilder ExceptSignupStatus()
    {
        return ExceptField("signupStatus");
    }

    public HomeQueryBuilder WithDisaggregation(DisaggregationQueryBuilder disaggregationQueryBuilder, Resolution? resolution = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (resolution != null)
            args.Add("resolution", resolution);

        return WithObjectField("disaggregation", disaggregationQueryBuilder, args);
    }

    public HomeQueryBuilder ExceptDisaggregation()
    {
        return ExceptField("disaggregation");
    }

    public HomeQueryBuilder WithDevices(DeviceQueryBuilder deviceQueryBuilder)
    {
        return WithObjectField("devices", deviceQueryBuilder);
    }

    public HomeQueryBuilder ExceptDevices()
    {
        return ExceptField("devices");
    }

    public HomeQueryBuilder WithWeather(WeatherQueryBuilder weatherQueryBuilder)
    {
        return WithObjectField("weather", weatherQueryBuilder);
    }

    public HomeQueryBuilder ExceptWeather()
    {
        return ExceptField("weather");
    }

    public HomeQueryBuilder WithAwayMode(VacationModeQueryBuilder vacationModeQueryBuilder)
    {
        return WithObjectField("awayMode", vacationModeQueryBuilder);
    }

    public HomeQueryBuilder ExceptAwayMode()
    {
        return ExceptField("awayMode");
    }
}

public partial class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "validFrom" },
            new FieldMetadata { Name = "validTo" },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "billingRegionId" },
            new FieldMetadata { Name = "energyStatements", IsComplex = true },
            new FieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionQueryBuilder(string alias = null) : base(alias)
    {
    }

    public SubscriptionQueryBuilder WithId(string alias = null)
    {
        return WithScalarField("id", alias);
    }

    public SubscriptionQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public SubscriptionQueryBuilder WithValidFrom(string alias = null)
    {
        return WithScalarField("validFrom", alias);
    }

    public SubscriptionQueryBuilder ExceptValidFrom()
    {
        return ExceptField("validFrom");
    }

    public SubscriptionQueryBuilder WithValidTo(string alias = null)
    {
        return WithScalarField("validTo", alias);
    }

    public SubscriptionQueryBuilder ExceptValidTo()
    {
        return ExceptField("validTo");
    }

    public SubscriptionQueryBuilder WithStatus(string alias = null)
    {
        return WithScalarField("status", alias);
    }

    public SubscriptionQueryBuilder ExceptStatus()
    {
        return ExceptField("status");
    }

    public SubscriptionQueryBuilder WithBillingRegionId(string alias = null)
    {
        return WithScalarField("billingRegionId", alias);
    }

    public SubscriptionQueryBuilder ExceptBillingRegionId()
    {
        return ExceptField("billingRegionId");
    }

    public SubscriptionQueryBuilder WithEnergyStatements(DateTimeOffset? from = null, DateTimeOffset? to = null, string alias = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (from != null)
            args.Add("from", from);

        if (to != null)
            args.Add("to", to);

        return WithScalarField("energyStatements", alias, args);
    }

    public SubscriptionQueryBuilder ExceptEnergyStatements()
    {
        return ExceptField("energyStatements");
    }

    public SubscriptionQueryBuilder WithPriceRating(PriceRatingQueryBuilder priceRatingQueryBuilder)
    {
        return WithObjectField("priceRating", priceRatingQueryBuilder);
    }

    public SubscriptionQueryBuilder ExceptPriceRating()
    {
        return ExceptField("priceRating");
    }
}

public partial class PriceRatingQueryBuilder : GraphQlQueryBuilder<PriceRatingQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "minPrice" },
            new FieldMetadata { Name = "maxPrice" },
            new FieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(PriceRatingEntryQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceRatingQueryBuilder(string alias = null) : base(alias)
    {
    }

    public PriceRatingQueryBuilder WithMinPrice(string alias = null)
    {
        return WithScalarField("minPrice", alias);
    }

    public PriceRatingQueryBuilder ExceptMinPrice()
    {
        return ExceptField("minPrice");
    }

    public PriceRatingQueryBuilder WithMaxPrice(string alias = null)
    {
        return WithScalarField("maxPrice", alias);
    }

    public PriceRatingQueryBuilder ExceptMaxPrice()
    {
        return ExceptField("maxPrice");
    }

    public PriceRatingQueryBuilder WithEntries(PriceRatingEntryQueryBuilder priceRatingEntryQueryBuilder)
    {
        return WithObjectField("entries", priceRatingEntryQueryBuilder);
    }

    public PriceRatingQueryBuilder ExceptEntries()
    {
        return ExceptField("entries");
    }
}

public partial class PriceRatingEntryQueryBuilder : GraphQlQueryBuilder<PriceRatingEntryQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "time" },
            new FieldMetadata { Name = "price" },
            new FieldMetadata { Name = "level" },
            new FieldMetadata { Name = "difference" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceRatingEntryQueryBuilder(string alias = null) : base(alias)
    {
    }

    public PriceRatingEntryQueryBuilder WithTime(string alias = null)
    {
        return WithScalarField("time", alias);
    }

    public PriceRatingEntryQueryBuilder ExceptTime()
    {
        return ExceptField("time");
    }

    public PriceRatingEntryQueryBuilder WithPrice(string alias = null)
    {
        return WithScalarField("price", alias);
    }

    public PriceRatingEntryQueryBuilder ExceptPrice()
    {
        return ExceptField("price");
    }

    public PriceRatingEntryQueryBuilder WithLevel(string alias = null)
    {
        return WithScalarField("level", alias);
    }

    public PriceRatingEntryQueryBuilder ExceptLevel()
    {
        return ExceptField("level");
    }

    public PriceRatingEntryQueryBuilder WithDifference(string alias = null)
    {
        return WithScalarField("difference", alias);
    }

    public PriceRatingEntryQueryBuilder ExceptDifference()
    {
        return ExceptField("difference");
    }
}

public partial class ConsumptionMonthQueryBuilder : GraphQlQueryBuilder<ConsumptionMonthQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "kwh" },
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "kwhEstimate" },
            new FieldMetadata { Name = "costEstimate" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ConsumptionMonthQueryBuilder(string alias = null) : base(alias)
    {
    }

    public ConsumptionMonthQueryBuilder WithYear(string alias = null)
    {
        return WithScalarField("year", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public ConsumptionMonthQueryBuilder WithMonth(string alias = null)
    {
        return WithScalarField("month", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public ConsumptionMonthQueryBuilder WithKwh(string alias = null)
    {
        return WithScalarField("kwh", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptKwh()
    {
        return ExceptField("kwh");
    }

    public ConsumptionMonthQueryBuilder WithCost(string alias = null)
    {
        return WithScalarField("cost", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptCost()
    {
        return ExceptField("cost");
    }

    public ConsumptionMonthQueryBuilder WithIsComplete(string alias = null)
    {
        return WithScalarField("isComplete", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptIsComplete()
    {
        return ExceptField("isComplete");
    }

    public ConsumptionMonthQueryBuilder WithKwhEstimate(string alias = null)
    {
        return WithScalarField("kwhEstimate", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptKwhEstimate()
    {
        return ExceptField("kwhEstimate");
    }

    public ConsumptionMonthQueryBuilder WithCostEstimate(string alias = null)
    {
        return WithScalarField("costEstimate", alias);
    }

    public ConsumptionMonthQueryBuilder ExceptCostEstimate()
    {
        return ExceptField("costEstimate");
    }
}

public partial class ConsumptionQueryBuilder : GraphQlQueryBuilder<ConsumptionQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "annualValues", IsComplex = true },
            new FieldMetadata { Name = "monthlyValues", IsComplex = true },
            new FieldMetadata { Name = "weeklyValues", IsComplex = true },
            new FieldMetadata { Name = "dailyValues", IsComplex = true },
            new FieldMetadata { Name = "hourlyValues", IsComplex = true },
            new FieldMetadata { Name = "totalConsumption" },
            new FieldMetadata { Name = "energyCost" },
            new FieldMetadata { Name = "totalCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "latestTransactionTimestamp" },
            new FieldMetadata { Name = "timeZone" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ConsumptionQueryBuilder(string alias = null) : base(alias)
    {
    }

    public ConsumptionQueryBuilder WithAnnualValues(string alias = null)
    {
        return WithScalarField("annualValues", alias);
    }

    public ConsumptionQueryBuilder ExceptAnnualValues()
    {
        return ExceptField("annualValues");
    }

    public ConsumptionQueryBuilder WithMonthlyValues(string alias = null)
    {
        return WithScalarField("monthlyValues", alias);
    }

    public ConsumptionQueryBuilder ExceptMonthlyValues()
    {
        return ExceptField("monthlyValues");
    }

    public ConsumptionQueryBuilder WithWeeklyValues(string alias = null)
    {
        return WithScalarField("weeklyValues", alias);
    }

    public ConsumptionQueryBuilder ExceptWeeklyValues()
    {
        return ExceptField("weeklyValues");
    }

    public ConsumptionQueryBuilder WithDailyValues(string alias = null)
    {
        return WithScalarField("dailyValues", alias);
    }

    public ConsumptionQueryBuilder ExceptDailyValues()
    {
        return ExceptField("dailyValues");
    }

    public ConsumptionQueryBuilder WithHourlyValues(string alias = null)
    {
        return WithScalarField("hourlyValues", alias);
    }

    public ConsumptionQueryBuilder ExceptHourlyValues()
    {
        return ExceptField("hourlyValues");
    }

    public ConsumptionQueryBuilder WithTotalConsumption(string alias = null)
    {
        return WithScalarField("totalConsumption", alias);
    }

    public ConsumptionQueryBuilder ExceptTotalConsumption()
    {
        return ExceptField("totalConsumption");
    }

    public ConsumptionQueryBuilder WithEnergyCost(string alias = null)
    {
        return WithScalarField("energyCost", alias);
    }

    public ConsumptionQueryBuilder ExceptEnergyCost()
    {
        return ExceptField("energyCost");
    }

    public ConsumptionQueryBuilder WithTotalCost(string alias = null)
    {
        return WithScalarField("totalCost", alias);
    }

    public ConsumptionQueryBuilder ExceptTotalCost()
    {
        return ExceptField("totalCost");
    }

    public ConsumptionQueryBuilder WithCurrency(string alias = null)
    {
        return WithScalarField("currency", alias);
    }

    public ConsumptionQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public ConsumptionQueryBuilder WithLatestTransactionTimestamp(string alias = null)
    {
        return WithScalarField("latestTransactionTimestamp", alias);
    }

    public ConsumptionQueryBuilder ExceptLatestTransactionTimestamp()
    {
        return ExceptField("latestTransactionTimestamp");
    }

    public ConsumptionQueryBuilder WithTimeZone(string alias = null)
    {
        return WithScalarField("timeZone", alias);
    }

    public ConsumptionQueryBuilder ExceptTimeZone()
    {
        return ExceptField("timeZone");
    }
}

public partial class PreLiveComparisonQueryBuilder : GraphQlQueryBuilder<PreLiveComparisonQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "homeId" },
            new FieldMetadata { Name = "basedOnActuals" },
            new FieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new FieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PreLiveComparisonQueryBuilder(string alias = null) : base(alias)
    {
    }

    public PreLiveComparisonQueryBuilder WithHomeId(string alias = null)
    {
        return WithScalarField("homeId", alias);
    }

    public PreLiveComparisonQueryBuilder ExceptHomeId()
    {
        return ExceptField("homeId");
    }

    public PreLiveComparisonQueryBuilder WithBasedOnActuals(string alias = null)
    {
        return WithScalarField("basedOnActuals", alias);
    }

    public PreLiveComparisonQueryBuilder ExceptBasedOnActuals()
    {
        return ExceptField("basedOnActuals");
    }

    public PreLiveComparisonQueryBuilder WithPreviousYear(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("previousYear", comparisonQueryBuilder);
    }

    public PreLiveComparisonQueryBuilder ExceptPreviousYear()
    {
        return ExceptField("previousYear");
    }

    public PreLiveComparisonQueryBuilder WithPreviousYearMonths(ComparisonQueryBuilder comparisonQueryBuilder)
    {
        return WithObjectField("previousYearMonths", comparisonQueryBuilder);
    }

    public PreLiveComparisonQueryBuilder ExceptPreviousYearMonths()
    {
        return ExceptField("previousYearMonths");
    }
}

public partial class ComparisonQueryBuilder : GraphQlQueryBuilder<ComparisonQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "resolution" },
            new FieldMetadata { Name = "homeEfficency" },
            new FieldMetadata { Name = "homeEfficencyDescription" },
            new FieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new FieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new FieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ComparisonQueryBuilder(string alias = null) : base(alias)
    {
    }

    public ComparisonQueryBuilder WithYear(string alias = null)
    {
        return WithScalarField("year", alias);
    }

    public ComparisonQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public ComparisonQueryBuilder WithMonth(string alias = null)
    {
        return WithScalarField("month", alias);
    }

    public ComparisonQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public ComparisonQueryBuilder WithResolution(string alias = null)
    {
        return WithScalarField("resolution", alias);
    }

    public ComparisonQueryBuilder ExceptResolution()
    {
        return ExceptField("resolution");
    }

    public ComparisonQueryBuilder WithHomeEfficency(string alias = null)
    {
        return WithScalarField("homeEfficency", alias);
    }

    public ComparisonQueryBuilder ExceptHomeEfficency()
    {
        return ExceptField("homeEfficency");
    }

    public ComparisonQueryBuilder WithHomeEfficencyDescription(string alias = null)
    {
        return WithScalarField("homeEfficencyDescription", alias);
    }

    public ComparisonQueryBuilder ExceptHomeEfficencyDescription()
    {
        return ExceptField("homeEfficencyDescription");
    }

    public ComparisonQueryBuilder WithHome(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("home", comparisonDataQueryBuilder);
    }

    public ComparisonQueryBuilder ExceptHome()
    {
        return ExceptField("home");
    }

    public ComparisonQueryBuilder WithAverage(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("average", comparisonDataQueryBuilder);
    }

    public ComparisonQueryBuilder ExceptAverage()
    {
        return ExceptField("average");
    }

    public ComparisonQueryBuilder WithEfficient(ComparisonDataQueryBuilder comparisonDataQueryBuilder)
    {
        return WithObjectField("efficient", comparisonDataQueryBuilder);
    }

    public ComparisonQueryBuilder ExceptEfficient()
    {
        return ExceptField("efficient");
    }
}

public partial class ComparisonDataQueryBuilder : GraphQlQueryBuilder<ComparisonDataQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "cost" },
            new FieldMetadata { Name = "consumption" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ComparisonDataQueryBuilder(string alias = null) : base(alias)
    {
    }

    public ComparisonDataQueryBuilder WithCost(string alias = null)
    {
        return WithScalarField("cost", alias);
    }

    public ComparisonDataQueryBuilder ExceptCost()
    {
        return ExceptField("cost");
    }

    public ComparisonDataQueryBuilder WithConsumption(string alias = null)
    {
        return WithScalarField("consumption", alias);
    }

    public ComparisonDataQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }
}

public partial class SignupStatusQueryBuilder : GraphQlQueryBuilder<SignupStatusQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new FieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new FieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SignupStatusQueryBuilder(string alias = null) : base(alias)
    {
    }

    public SignupStatusQueryBuilder WithFeedStep(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("feedStep", processStepQueryBuilder);
    }

    public SignupStatusQueryBuilder ExceptFeedStep()
    {
        return ExceptField("feedStep");
    }

    public SignupStatusQueryBuilder WithAvatarStep(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("avatarStep", processStepQueryBuilder);
    }

    public SignupStatusQueryBuilder ExceptAvatarStep()
    {
        return ExceptField("avatarStep");
    }

    public SignupStatusQueryBuilder WithSteps(ProcessStepQueryBuilder processStepQueryBuilder)
    {
        return WithObjectField("steps", processStepQueryBuilder);
    }

    public SignupStatusQueryBuilder ExceptSteps()
    {
        return ExceptField("steps");
    }
}

public partial class ProcessStepQueryBuilder : GraphQlQueryBuilder<ProcessStepQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "isComplete" },
            new FieldMetadata { Name = "title" },
            new FieldMetadata { Name = "description" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ProcessStepQueryBuilder(string alias = null) : base(alias)
    {
    }

    public ProcessStepQueryBuilder WithTimestamp(string alias = null)
    {
        return WithScalarField("timestamp", alias);
    }

    public ProcessStepQueryBuilder ExceptTimestamp()
    {
        return ExceptField("timestamp");
    }

    public ProcessStepQueryBuilder WithIsComplete(string alias = null)
    {
        return WithScalarField("isComplete", alias);
    }

    public ProcessStepQueryBuilder ExceptIsComplete()
    {
        return ExceptField("isComplete");
    }

    public ProcessStepQueryBuilder WithTitle(string alias = null)
    {
        return WithScalarField("title", alias);
    }

    public ProcessStepQueryBuilder ExceptTitle()
    {
        return ExceptField("title");
    }

    public ProcessStepQueryBuilder WithDescription(string alias = null)
    {
        return WithScalarField("description", alias);
    }

    public ProcessStepQueryBuilder ExceptDescription()
    {
        return ExceptField("description");
    }
}

public partial class DisaggregationQueryBuilder : GraphQlQueryBuilder<DisaggregationQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "year" },
            new FieldMetadata { Name = "month" },
            new FieldMetadata { Name = "fixedConsumptionKwh" },
            new FieldMetadata { Name = "fixedConsumptionKwhPercent" },
            new FieldMetadata { Name = "fixedConsumptionCost" },
            new FieldMetadata { Name = "heatingConsumptionKwh" },
            new FieldMetadata { Name = "heatingConsumptionKwhPercent" },
            new FieldMetadata { Name = "heatingConsumptionCost" },
            new FieldMetadata { Name = "behaviorConsumptionKwh" },
            new FieldMetadata { Name = "behaviorConsumptionKwhPercent" },
            new FieldMetadata { Name = "behaviorConsumptionCost" },
            new FieldMetadata { Name = "currency" },
            new FieldMetadata { Name = "isValid" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public DisaggregationQueryBuilder(string alias = null) : base(alias)
    {
    }

    public DisaggregationQueryBuilder WithYear(string alias = null)
    {
        return WithScalarField("year", alias);
    }

    public DisaggregationQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public DisaggregationQueryBuilder WithMonth(string alias = null)
    {
        return WithScalarField("month", alias);
    }

    public DisaggregationQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwh(string alias = null)
    {
        return WithScalarField("fixedConsumptionKwh", alias);
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionKwh()
    {
        return ExceptField("fixedConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwhPercent(string alias = null)
    {
        return WithScalarField("fixedConsumptionKwhPercent", alias);
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionKwhPercent()
    {
        return ExceptField("fixedConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionCost(string alias = null)
    {
        return WithScalarField("fixedConsumptionCost", alias);
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionCost()
    {
        return ExceptField("fixedConsumptionCost");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwh(string alias = null)
    {
        return WithScalarField("heatingConsumptionKwh", alias);
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionKwh()
    {
        return ExceptField("heatingConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwhPercent(string alias = null)
    {
        return WithScalarField("heatingConsumptionKwhPercent", alias);
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionKwhPercent()
    {
        return ExceptField("heatingConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionCost(string alias = null)
    {
        return WithScalarField("heatingConsumptionCost", alias);
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionCost()
    {
        return ExceptField("heatingConsumptionCost");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwh(string alias = null)
    {
        return WithScalarField("behaviorConsumptionKwh", alias);
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwh()
    {
        return ExceptField("behaviorConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwhPercent(string alias = null)
    {
        return WithScalarField("behaviorConsumptionKwhPercent", alias);
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwhPercent()
    {
        return ExceptField("behaviorConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionCost(string alias = null)
    {
        return WithScalarField("behaviorConsumptionCost", alias);
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionCost()
    {
        return ExceptField("behaviorConsumptionCost");
    }

    public DisaggregationQueryBuilder WithCurrency(string alias = null)
    {
        return WithScalarField("currency", alias);
    }

    public DisaggregationQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public DisaggregationQueryBuilder WithIsValid(string alias = null)
    {
        return WithScalarField("isValid", alias);
    }

    public DisaggregationQueryBuilder ExceptIsValid()
    {
        return ExceptField("isValid");
    }
}

public partial class DeviceQueryBuilder : GraphQlQueryBuilder<DeviceQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "deviceId" },
            new FieldMetadata { Name = "type" },
            new FieldMetadata { Name = "isControllable" },
            new FieldMetadata { Name = "externalId" },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "isBatteryLow" },
            new FieldMetadata { Name = "isSignalLow" },
            new FieldMetadata { Name = "isAlive" },
            new FieldMetadata { Name = "capabilities", IsComplex = true },
            new FieldMetadata { Name = "properties", IsComplex = true }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public DeviceQueryBuilder(string alias = null) : base(alias)
    {
    }

    public DeviceQueryBuilder WithDeviceId(string alias = null)
    {
        return WithScalarField("deviceId", alias);
    }

    public DeviceQueryBuilder ExceptDeviceId()
    {
        return ExceptField("deviceId");
    }

    public DeviceQueryBuilder WithType(string alias = null)
    {
        return WithScalarField("type", alias);
    }

    public DeviceQueryBuilder ExceptType()
    {
        return ExceptField("type");
    }

    public DeviceQueryBuilder WithIsControllable(string alias = null)
    {
        return WithScalarField("isControllable", alias);
    }

    public DeviceQueryBuilder ExceptIsControllable()
    {
        return ExceptField("isControllable");
    }

    public DeviceQueryBuilder WithExternalId(string alias = null)
    {
        return WithScalarField("externalId", alias);
    }

    public DeviceQueryBuilder ExceptExternalId()
    {
        return ExceptField("externalId");
    }

    public DeviceQueryBuilder WithName(string alias = null)
    {
        return WithScalarField("name", alias);
    }

    public DeviceQueryBuilder ExceptName()
    {
        return ExceptField("name");
    }

    public DeviceQueryBuilder WithIsBatteryLow(string alias = null)
    {
        return WithScalarField("isBatteryLow", alias);
    }

    public DeviceQueryBuilder ExceptIsBatteryLow()
    {
        return ExceptField("isBatteryLow");
    }

    public DeviceQueryBuilder WithIsSignalLow(string alias = null)
    {
        return WithScalarField("isSignalLow", alias);
    }

    public DeviceQueryBuilder ExceptIsSignalLow()
    {
        return ExceptField("isSignalLow");
    }

    public DeviceQueryBuilder WithIsAlive(string alias = null)
    {
        return WithScalarField("isAlive", alias);
    }

    public DeviceQueryBuilder ExceptIsAlive()
    {
        return ExceptField("isAlive");
    }

    public DeviceQueryBuilder WithCapabilities(string alias = null)
    {
        return WithScalarField("capabilities", alias);
    }

    public DeviceQueryBuilder ExceptCapabilities()
    {
        return ExceptField("capabilities");
    }

    public DeviceQueryBuilder WithProperties(string alias = null)
    {
        return WithScalarField("properties", alias);
    }

    public DeviceQueryBuilder ExceptProperties()
    {
        return ExceptField("properties");
    }
}

public partial class WeatherQueryBuilder : GraphQlQueryBuilder<WeatherQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "temperature" },
            new FieldMetadata { Name = "timestamp" },
            new FieldMetadata { Name = "summary" },
            new FieldMetadata { Name = "type" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public WeatherQueryBuilder(string alias = null) : base(alias)
    {
    }

    public WeatherQueryBuilder WithTemperature(string alias = null)
    {
        return WithScalarField("temperature", alias);
    }

    public WeatherQueryBuilder ExceptTemperature()
    {
        return ExceptField("temperature");
    }

    public WeatherQueryBuilder WithTimestamp(string alias = null)
    {
        return WithScalarField("timestamp", alias);
    }

    public WeatherQueryBuilder ExceptTimestamp()
    {
        return ExceptField("timestamp");
    }

    public WeatherQueryBuilder WithSummary(string alias = null)
    {
        return WithScalarField("summary", alias);
    }

    public WeatherQueryBuilder ExceptSummary()
    {
        return ExceptField("summary");
    }

    public WeatherQueryBuilder WithType(string alias = null)
    {
        return WithScalarField("type", alias);
    }

    public WeatherQueryBuilder ExceptType()
    {
        return ExceptField("type");
    }
}

public partial class VacationModeQueryBuilder : GraphQlQueryBuilder<VacationModeQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "isSupported" },
            new FieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(AwayModeSettingsQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public VacationModeQueryBuilder(string alias = null) : base(alias)
    {
    }

    public VacationModeQueryBuilder WithIsSupported(string alias = null)
    {
        return WithScalarField("isSupported", alias);
    }

    public VacationModeQueryBuilder ExceptIsSupported()
    {
        return ExceptField("isSupported");
    }

    public VacationModeQueryBuilder WithSettings(AwayModeSettingsQueryBuilder awayModeSettingsQueryBuilder)
    {
        return WithObjectField("settings", awayModeSettingsQueryBuilder);
    }

    public VacationModeQueryBuilder ExceptSettings()
    {
        return ExceptField("settings");
    }
}

public partial class AwayModeSettingsQueryBuilder : GraphQlQueryBuilder<AwayModeSettingsQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "from" },
            new FieldMetadata { Name = "to" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public AwayModeSettingsQueryBuilder(string alias = null) : base(alias)
    {
    }

    public AwayModeSettingsQueryBuilder WithFrom(string alias = null)
    {
        return WithScalarField("from", alias);
    }

    public AwayModeSettingsQueryBuilder ExceptFrom()
    {
        return ExceptField("from");
    }

    public AwayModeSettingsQueryBuilder WithTo(string alias = null)
    {
        return WithScalarField("to", alias);
    }

    public AwayModeSettingsQueryBuilder ExceptTo()
    {
        return ExceptField("to");
    }
}

public partial class FeedQueryBuilder : GraphQlQueryBuilder<FeedQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "numberOfItems" },
            new FieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(FeedItemQueryBuilder) },
            new FieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(PushNotificationQueryBuilder) }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public FeedQueryBuilder(string alias = null) : base(alias)
    {
    }

    public FeedQueryBuilder WithNumberOfItems(string alias = null)
    {
        return WithScalarField("numberOfItems", alias);
    }

    public FeedQueryBuilder ExceptNumberOfItems()
    {
        return ExceptField("numberOfItems");
    }

    public FeedQueryBuilder WithItems(FeedItemQueryBuilder feedItemQueryBuilder, int? page = null, int? pageSize = null)
    {
        var args = new Dictionary<string, object>(StringComparer.Ordinal);
        if (page != null)
            args.Add("page", page);

        if (pageSize != null)
            args.Add("pageSize", pageSize);

        return WithObjectField("items", feedItemQueryBuilder, args);
    }

    public FeedQueryBuilder ExceptItems()
    {
        return ExceptField("items");
    }

    public FeedQueryBuilder WithPushNotifications(PushNotificationQueryBuilder pushNotificationQueryBuilder)
    {
        return WithObjectField("pushNotifications", pushNotificationQueryBuilder);
    }

    public FeedQueryBuilder ExceptPushNotifications()
    {
        return ExceptField("pushNotifications");
    }
}

public partial class FeedItemQueryBuilder : GraphQlQueryBuilder<FeedItemQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "messageTypeId" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" },
            new FieldMetadata { Name = "createdAt" },
            new FieldMetadata { Name = "modifiedAt" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public FeedItemQueryBuilder(string alias = null) : base(alias)
    {
    }

    public FeedItemQueryBuilder WithId(string alias = null)
    {
        return WithScalarField("id", alias);
    }

    public FeedItemQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public FeedItemQueryBuilder WithMessageTypeId(string alias = null)
    {
        return WithScalarField("messageTypeId", alias);
    }

    public FeedItemQueryBuilder ExceptMessageTypeId()
    {
        return ExceptField("messageTypeId");
    }

    public FeedItemQueryBuilder WithLink(string alias = null)
    {
        return WithScalarField("link", alias);
    }

    public FeedItemQueryBuilder ExceptLink()
    {
        return ExceptField("link");
    }

    public FeedItemQueryBuilder WithText(string alias = null)
    {
        return WithScalarField("text", alias);
    }

    public FeedItemQueryBuilder ExceptText()
    {
        return ExceptField("text");
    }

    public FeedItemQueryBuilder WithCreatedAt(string alias = null)
    {
        return WithScalarField("createdAt", alias);
    }

    public FeedItemQueryBuilder ExceptCreatedAt()
    {
        return ExceptField("createdAt");
    }

    public FeedItemQueryBuilder WithModifiedAt(string alias = null)
    {
        return WithScalarField("modifiedAt", alias);
    }

    public FeedItemQueryBuilder ExceptModifiedAt()
    {
        return ExceptField("modifiedAt");
    }
}

public partial class PushNotificationQueryBuilder : GraphQlQueryBuilder<PushNotificationQueryBuilder>
{
    private static readonly FieldMetadata[] AllFieldMetadata =
        new []
        {
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "link" },
            new FieldMetadata { Name = "text" }
        };

    protected override IList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PushNotificationQueryBuilder(string alias = null) : base(alias)
    {
    }

    public PushNotificationQueryBuilder WithId(string alias = null)
    {
        return WithScalarField("id", alias);
    }

    public PushNotificationQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public PushNotificationQueryBuilder WithLink(string alias = null)
    {
        return WithScalarField("link", alias);
    }

    public PushNotificationQueryBuilder ExceptLink()
    {
        return ExceptField("link");
    }

    public PushNotificationQueryBuilder WithText(string alias = null)
    {
        return WithScalarField("text", alias);
    }

    public PushNotificationQueryBuilder ExceptText()
    {
        return ExceptField("text");
    }
}
#endregion
